Libft
Ваша первая собственная библиотека
Резюме: цель этого проекта - написать библиотеку C, перегруппировавшую обычные функции, которые вам будет разрешено использовать во всех других ваших проектах.
_____________________________
_____________________________

Содержание
I Введение 2
II Общие инструкции 3
III Обязательная часть 4
III.1 Технические соображения. . . . . . . . . . . . . . . . . . . . . . . . . . 4
III.2 Часть 1 - Функции Libc. . . . . . . . . . . . . . . . . . . . . . . . . . 5
III.3 Часть 2 - Дополнительные функции. . . . . . . . . . . . . . . . . . . . . . . 6
IV Бонус, часть 9

_____________________________
_____________________________

Глава I

Вступление

Программирование на C может быть очень утомительным, если у человека нет доступа к этим очень полезным стандартным функциям. Этот проект дает вам возможность переписать эти функции, понять их и научиться их использовать. Эта библиотека поможет вам во всех ваших будущих проектах C.
Благодаря этому проекту мы также даем вам возможность расширить список функций своими собственными. Найдите время, чтобы расширять свой libft в течение года.
_____________________________
_____________________________


Глава II.

Общие инструкции

• Ваш проект должен быть написан в соответствии с Нормой. Если у вас есть бонусные файлы / функции, они включены в проверку нормы, и вы получите 0, если внутри есть ошибка нормы.

• Ваши функции не должны завершаться неожиданно (ошибка сегментации, ошибка шины, двойное освобождение и т. Д.), За исключением неопределенного поведения. Если это произойдет, ваш проект будет считаться нефункциональным и получит 0 во время оценки.

• Все пространство памяти, выделенное кучей, должно быть должным образом освобождено при необходимости. Никакие утечки недопустимы.

• Если субъект требует этого, вы должны отправить Makefile, который скомпилирует ваши исходные файлы в требуемый вывод с флагами -Wall, -Wextra и -Werror, и ваш Makefile не должен повторно связываться.

• Ваш Makefile должен содержать как минимум правила $ (NAME), all, clean, fclean и re.

• Чтобы получить бонусы для вашего проекта, вы должны включить бонус правила в свой Makefile, который добавит все различные заголовки, библиотеки или функции, запрещенные в основной части проекта. Бонусы должны быть в другом файле _bonus. {C / h}.
Оценка обязательной и бонусной части проводится отдельно.

• Если ваш проект позволяет вам использовать ваш libft, вы должны скопировать его исходный код и связанный с ним Makefile в папку libft с соответствующим Makefile. Makefile вашего проекта должен скомпилировать библиотеку, используя свой Makefile, а затем скомпилировать проект.

• Мы рекомендуем вам создавать программы тестирования для своего проекта, даже если эту работу не нужно будет отправлять и оценивать. Это даст вам возможность легко проверить свою работу и работу ваших коллег. Вы найдете эти тесты особенно полезными во время защиты. Действительно, во время защиты вы можете использовать свои тесты и / или тесты партнера, которого вы оцениваете.

• Отправьте свою работу в назначенный репозиторий git. Оцениваться будет только работа в репозитории git. Если DeepThreadt назначен для оценки вашей работы, это будет сделано после ваших оценок коллег. Если во время выставления оценок Deepoughtt в каком-либо разделе вашей работы произойдет ошибка, оценка остановится.

_____________________________
_____________________________

Глава III.

Обязательная часть

______________________________________________________________________
|    Название программы 	|	libft.a
______________________________________________________________________
|    Включите файлы 		|	* .c, libft.h, Makefile
______________________________________________________________________
|    Makefile 			|	Да
______________________________________________________________________
|    Внешние функции. 		|	Подробно ниже
______________________________________________________________________
|    Разрешено Libft 		|	Не применимо
______________________________________________________________________
|    Описание 			|	Напишите свою собственную библиотеку, содержащую отрывки из важных функций   для вашего курсора.
______________________________________________________________________

III.1 Технические соображения


• Запрещено использовать глобальные переменные.

• Если вам нужны подфункции для написания сложной функции, вы должны определить эти подфункции как статические, чтобы не публиковать их вместе с вашей библиотекой. Было бы хорошей привычкой делать это и в ваших будущих проектах.

• Отправьте все файлы в корень вашего репозитория.

• Вы должны использовать команду ar для создания вашей библиотеки, использование команды libtool запрещено.

______________________________
______________________________

III.2 Часть 1 - Функции Libc

В этой первой части вы должны перекодировать набор функций libc, как определено в их руководстве. Ваши функции должны будут представлять тот же прототип и поведение, что и оригиналы. Имена ваших функций должны иметь префикс ft_. Например, strlen становится ft_strlen.

В некоторых прототипах функций, которые необходимо перекодировать, используется квалификатор restrict. Это ключевое слово является частью стандарта c99.
Поэтому запрещено включать его в свои прототипы и компилировать с флагом -std = c99.

Вы должны перекодировать следующие функции. Эти функции не нуждаются во внешних функциях:

• memset
• bzero
• memcpy
• memccpy
• memmove
• memchr
• memcmp
• strlen
• strlcpy
• strlcat
• strchr
• strrchr
• strnstr
• strncmp
• atoi
• isalpha
• isdigit
• isalnum
• isascii
• isprint
• toupper
• tolower

Вы также должны перекодировать следующие функции, используя функцию «malloc»:

• calloc
• strdup

______________________________
______________________________

III.3 Часть 2 - Дополнительные функции

Во второй части вы должны закодировать набор функций, которые либо не включены в libc, либо включены в другую форму. Некоторые из этих функций могут быть полезны для написания функций Части 1.

______________________________
______________________________

Глава IV.
Бонусная часть

Если вы успешно выполнили обязательную часть, вы сможете продолжить ее. Вы можете рассматривать этот последний раздел как бонусные баллы.

Наличие функций для управления памятью и строками очень полезно, но вскоре вы обнаружите, что функции для управления списками еще более полезны.

Вы будете использовать следующую структуру для представления элементов вашего списка. Эта структура должна быть добавлена в ваш файл libft.h.

make Bonus добавит бонусные функции в библиотеку libft.a.
Вам не нужно добавлять _bonus к файлам .c и заголовку в этой части. Добавляйте _bonus только в файлы, содержащие ваши собственные бонусные функции.

typedef struct 		s_list
{
	void *content;
	struct s_list *next;
} 			t_list;

Вот описание полей структуры t_list:
• content: данные, содержащиеся в элементе. Void * позволяет хранить любые данные.
• next: адрес следующего элемента или NULL, если это последний элемент.

Следующие функции позволят вам легко использовать ваши списки.



_______________
Вы можете добавить в свой libft любую функцию, которую сочтете нужным.
